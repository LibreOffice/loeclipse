/*
 * This file has been automatically generated by the ooeclipse integration.
 * http://cedric.bosdonnat.free.fr/ooeclipseintegration
 *
 * Ported by Cedric Bosdonnat from the JODConverter code.
 * The original Java code has been written by Mirko Nasato <mirko@artofsolving.com>
 *
 * Copyright (C) 2009 Novell Inc.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * http://www.gnu.org/copyleft/lesser.html
 *
 * Contributor:
 * Mirko Nasato <mirko@artofsolving.com>
 * Laurent Godard <lgodard@nuxeo.com>
 */

#ifndef CONNECTION_HXX_
#define CONNECTION_HXX_

#include <com/sun/star/frame/XDesktop.hpp>
#include <com/sun/star/bridge/XBridge.hpp>
#include <com/sun/star/uno/XComponentContext.hpp>
#include <com/sun/star/lang/XMultiComponentFactory.hpp>
#include <com/sun/star/lang/XEventListener.hpp>
#include <cppuhelper/implbase1.hxx>

#include <rtl/ustring.hxx>


namespace unoclienthelper {

class AbstractConnection : public cppu::WeakImplHelper1< com::sun::star::lang::XEventListener >
{
private:
	com::sun::star::uno::Reference<com::sun::star::uno::XComponentContext> m_xCtx;
	com::sun::star::uno::Reference<com::sun::star::bridge::XBridge> m_xBridge;
	com::sun::star::uno::Reference<com::sun::star::lang::XMultiComponentFactory> m_xServiceMngr;

	bool m_bExpectingDisconnect;
	bool m_bConnected;

protected:
	rtl::OUString m_sConnectionString;

public:
	AbstractConnection( );
	~AbstractConnection( );

	bool connect( );
	void disconnect( );
	bool isConnected( );

	com::sun::star::uno::Reference<com::sun::star::uno::XComponentContext> getContext( );
	com::sun::star::uno::Reference<com::sun::star::lang::XMultiComponentFactory> getServiceManager( );
	com::sun::star::uno::Reference<com::sun::star::frame::XDesktop> getDesktop( );

	void SAL_CALL disposing( const ::com::sun::star::lang::EventObject& Source )
			throw (::com::sun::star::uno::RuntimeException);

private:
	com::sun::star::uno::Reference<com::sun::star::uno::XInterface> getService( rtl::OUString sServiceName );
};

class PipeConnection : public AbstractConnection
{
public:
	PipeConnection( char* pPipeName );
	~PipeConnection( );
};

class SocketConnection : public AbstractConnection
{
public:
	SocketConnection( int nPort, char* pHost = "localhost" );
	~SocketConnection( );
};

} // End of namespace unoclienthelper

#endif /* CONNECTION_HXX_ */
